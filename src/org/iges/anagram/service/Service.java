/* Copyright (C) 2000-2021 by George Mason University.
*  Authored by Joe Wielgosz and maintained by Jennifer Adams.
*  See file COPYRIGHT for more information.
*/
package org.iges.anagram.service;

import java.io.*;
import java.util.*;
import java.text.*;
import javax.servlet.http.*;
import org.iges.anagram.*;

/** A handler for a particular type of client request. All server output
 *  to the network is generated by the service modules.
 */
public abstract class Service
    extends AbstractModule {

    public String getModuleID() {
	if (moduleID == null) {
	    moduleID = "service-" + getServiceName();
	}
	return moduleID;
    }

    /** Sets the enabled property of this service. If false,
     *  indicates to the dispatch filter 
     *  that the service should not be invoked.
     */
    public void setEnabled(boolean enabled) {
	this.enabled = enabled;
    }
    
    /** Returns whether this service should be invoked or not. */
    public boolean isEnabled() {
	return enabled;
    }

    /** Returns the name of this service. Used to build the module ID,
     *  and to map URLs to services. 
     */
    public abstract String getServiceName();

    /** Performs the service provided by this module.
     * @param request The request to be handled
     * @throws ModuleException if the service fails for any reason
     */
    public abstract void handle(ClientRequest request)
	throws ModuleException;

    /** Convenience method that determines the base URL of the server,
     *  using the current request.
     */
    protected String getBaseURL(ClientRequest clientRequest) {
	return "http://" + 
	    clientRequest.getHttpRequest().getServerName() + ":" +
	    clientRequest.getHttpRequest().getServerPort() + 
	    clientRequest.getHttpRequest().getContextPath();
    }

    /** Convenience method that opens the response stream to the client
     *  and sets the content type to HTML.
     */
    protected PrintStream startHTML(ClientRequest clientRequest) {
	clientRequest.getHttpResponse().setContentType("text/html");
	try {
	    return new PrintStream
		(clientRequest.getHttpResponse().getOutputStream());
	} catch (IOException ioe) {
	    return null;
	}
    }

    /** Used to provide a consistent "look and feel" to pages served
     *  by the server. Provides the opening portion of an HTML page response.
     *  @param windowTitle A title to appear in the window's title bar
     *  @param pageTitle A title to appear at the top of the page (can be HTML)
     *  @param path The handle associated with this request. If non-null,
     *    a hierarchical set of links up to the parents of this handle
     *    will be printed next to the link to the server home page
     *  @param baseURL The server's base URL. This must be specified with
     *    each request, as it is not guaranteed to be constant.
     */
    protected void printHeader(PrintStream p, 
			       String windowTitle, 
			       String pageTitle, 
			       Handle path,
			       String baseURL) {
	p.print("<html>\n");
	p.print("<head>\n");
       
	p.print("  <meta http-equiv=\"Content-Type\" content=\"text/html; " + 
		"charset=iso-8859-1\">\n");
	p.print("  <title>");
	p.print(server.getServerName());
	p.print(" - ");
	p.print(windowTitle);
	p.print("</title>\n");
	
	p.print("</head>\n");
	p.print(" <body bgcolor=\"#ffffff\">\n");
	p.print("<a href=\"");
	p.print(server.getSiteHomePage(baseURL));
	p.print("\">");
	p.print(server.getServerName());
	p.print("</a>\n");

	if (path != null) {
	    LinkedList paths = new LinkedList();
	    paths.addFirst(path);
	    while (!path.getCompleteName().equals("/")) {
		path = server.getCatalog().getParent(path);
		paths.addFirst(path);
	    }
	    Iterator it = paths.iterator();
	    while (it.hasNext()) {
		Handle next = (Handle)it.next();
		p.print("- <a href=\"");
		p.print(baseURL + next.getCompleteName()); 
		p.print("\">");
		if (next.getCompleteName().equals("/")) {
		    p.print("top level</a>\n"); 
		} else {
		    p.print(next.getName()); 
		    p.print("</a>\n");
		}
	    }		
	}		

	p.print("<br>\n");
	p.print("<h2>");
	p.print(server.getServerName());
	p.print(" - ");
	p.print(pageTitle);
	p.print("</h2>\n");
	p.print("<hr><br>\n");
    }

    /** Used to provide a consistent "look and feel" to pages served
     *  by the server. Provides the closing portion of an HTML page response.
     *  @param path The handle associated with this request. If non-null,
     *    a hierarchical set of links up to the parents of this handle
     *    will be printed next to the link to the server home page
     *  @param updateTime Te last update time for the page, or zero if not
     *  applicable
     *  @param baseURL The server's base URL. This must be specified with
     *    each request, as it is not guaranteed to be constant.
     */
    protected void printFooter(PrintStream p, Handle path, 
			       long updateTime, String baseURL) {
	if (path != null) {
	    p.print("<a href=\""); 
	    p.print(baseURL);
	    p.print(server.getCatalog().getParent(path).getCompleteName());
	    p.print("\">back to parent directory</a><br>");
	}
	p.print("<br>\n");
	p.print("<hr><font size=\"-1\"><a href=\"");
	p.print(server.getImplHomePage());
	p.print("\">\n");
	p.print(server.getImplName());
	p.print("</a> ");
	p.print(server.getImplVersion());
	p.print(" (<a href=\"");
	p.print(baseURL);
	p.print("/help\">");
	p.print("help&nbsp;using&nbsp;this&nbsp;server</a>)\n");
	if (updateTime > 0) {
	    if 	(updateFormat == null) {
		updateFormat = new SimpleDateFormat("hh'Z' dd MMM yyyy");
		updateFormat.setTimeZone(new SimpleTimeZone(0,"GMT"));
	    }
	    p.print(". This page last updated ");
	    p.print(updateFormat.format(new Date(updateTime)));
	}
	p.print(". &nbsp;</font>\n");
	p.print("<br>\n");
	p.print("</body>\n");
	p.print("</html>\n");
    }
    
    protected SimpleDateFormat updateFormat;

    /** Convenience method for data services, 
     *  which ensures that the client request contains a usable data handle. 
     *  @throws ModuleException If the handle is null, a directory,
     *   forbidden by the client's privilege set, 
     *   or flagged as unavailable
     */
    protected DataHandle getDataFromPath(ClientRequest clientRequest) 
	throws ModuleException {

	Handle handle = clientRequest.getHandle();
	if (handle == null || 
	    !clientRequest.getPrivilege().allows(handle.getCompleteName())) {
	    throw new ModuleException(this, "not an available dataset");
	}
	if (handle instanceof DirHandle) {
	    throw new ModuleException(this, "dataset is a directory");
	} else {
	    DataHandle data = (DataHandle)handle;
	    if (data.isAvailable()) {
		return data;
	    } else {
		throw new ModuleException(this, "unavailable");
	    }
	}
    }

    protected Hashtable getQueryParams(ClientRequest clientRequest) {
	HttpServletRequest request = clientRequest.getHttpRequest();

	Hashtable queryParams;
	if (request.getMethod().equals("POST")) {
	    try {
		queryParams = HttpUtils.parsePostData
		    (request.getIntHeader("Content-Length"),
		     request.getInputStream());
	    } catch (IOException ioe) {
		queryParams = new Hashtable();
	    }
	} else {
	    if (request.getQueryString() != null) {
		queryParams = 
		    HttpUtils.parseQueryString(request.getQueryString());
	    } else {
		queryParams = new Hashtable();
	    }
	}
	return queryParams;
    }	

    protected boolean enabled = true;
    protected String moduleID;
    
}
